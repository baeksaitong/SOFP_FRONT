name: Build and Distribute to TestFlight

on:
  push:
    branches:
      - main # 또는 배포하려는 브랜치 이름

jobs:
  ios-build:
    runs-on: macos-latest  # iOS 빌드를 위해 macOS 환경 사용

    steps:
      - uses: actions/checkout@v2

      # Flutter 설치
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'  # Dart SDK 버전 3.x.x에 맞는 최신 Flutter 버전

      # 인증서 및 프로비저닝 프로파일 설치
      - name: Decrypt and Install Certificates
        env:
          CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > ios_distribution.cer
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > provisioning_profile.mobileprovision
          security create-keychain -p "" build.keychain
          security import ios_distribution.cer -k ~/Library/Keychains/build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # 의존성 설치
      - name: Install dependencies
        run: flutter pub get

      # iOS 빌드
      - name: Build iOS IPA
        run: flutter build ios --release --dart-define=API_URL=${{ secrets.API_URL }} --dart-define=GOOGLE_MAP_API_KEY=${{ secrets.GOOGLE_MAP_API_KEY }} --dart-define=NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}

      # TestFlight 업로드
      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app --type ios --file build/ios/ipa/*.ipa --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }} --keyID ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
